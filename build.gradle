plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.0-SNAPSHOT" apply false
    id "io.github.juuxel.loom-quiltflower" version "1.+" apply false // Quiltflower, a better decompiler
}

architectury {
    minecraft = rootProject.minecraft_version
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "io.github.juuxel.loom-quiltflower"

    loom {
        silentMojangMappingsLicense()
        runs {
            client {
                client()
                vmArg("-Dmixin.debug.export=true")
            }
            server {
                server()
                vmArg("-Dmixin.debug.export=true")
            }
        }
    }

    repositories {
        mavenCentral()
        maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
        maven { url = "https://dvs1.progwml6.com/files/maven/" } // JEI
        maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
        maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
        maven { url = "https://jm.gserv.me/repository/maven-public/" } // JourneyMap API
        maven { url = "https://api.modrinth.com/maven" } // LazyDFU, JourneyMap
        maven { // Flywheel
            url = "https://maven.tterrag.com/"
            content {
                // need to be specific here due to version overlaps
                includeGroup("com.jozufozu.flywheel")
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        // layered mappings - Mojmap names, parchment and QM docs and parameters
        mappings(loom.layered {
            it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
            it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
            it.officialMojangMappings { nameSyntheticMembers = false }
        })

        // see each subproject for dependencies.
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    group = rootProject.maven_group

    version = "${minecraft_version}-${mod_version}"
    if (System.getenv("DEV") == "true") {
        version = "${minecraft_version}-${mod_version}-dev-${getGitHash()}"
    }
    if (System.getenv("CI") == "true") {
        version = "${minecraft_version}-nightly-${getGitHash()}"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    java {
        withSourcesJar()
    }
}

// TODO ARCH: BELOW

def hasUnstaged = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '--porcelain'
        standardOutput = stdout
    }
    def result = stdout.toString().replaceAll("M gradlew", "").trim()
    if (!result.isEmpty())
        println("Found stageable results:\n${result}\n")
    return !result.isEmpty()
}

//buildConfig {
//    buildConfigField 'String', 'MODID', "\"${modid}\""
//    buildConfigField 'String', 'VERSION', "\"${project.version}\""
//    buildConfigField 'String', 'DISPLAY_NAME', "\"${display_name}\""
//    def gitstage = "\"${getGitHash()}" + (hasUnstaged() ? "-modified" : "") + "\""
//    println("Using git stage ${gitstage}")
//    buildConfigField "String", "GITHASH", gitstage
//
//    version = project.version
//    packageName = project.group
//}
