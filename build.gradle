plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.1.+" apply false
    id "io.github.juuxel.loom-quiltflower" version "1.+" apply false // Quiltflower, a better decompiler
    id 'net.darkhax.curseforgegradle' version '1.0.11' // https://github.com/Darkhax/CurseForgeGradle
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "io.github.juuxel.loom-quiltflower"

    loom {
        silentMojangMappingsLicense()
        runs.configureEach {
            vmArg("-Dmixin.debug.export=true")
        }
    }

    repositories {
        mavenCentral()
        maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
        maven {
            // location of the maven that hosts JEI files before January 2023
            name = "Progwml6's maven"
            url = "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            // location of the maven that hosts JEI files since January 2023
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
        maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
        maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
        maven { url = "https://jm.gserv.me/repository/maven-public/" } // JourneyMap API
        maven { url = "https://api.modrinth.com/maven" } // LazyDFU, JourneyMap
        maven { // Flywheel
            url = "https://maven.tterrag.com/"
            content {
                // need to be specific here due to version overlaps
                includeGroup("com.jozufozu.flywheel")
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        // layered mappings - Mojmap names, parchment and QM docs and parameters
        mappings(loom.layered {
            it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
            it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
            it.officialMojangMappings { nameSyntheticMembers = false }
        })

        // see each subproject for dependencies.
    }

    tasks.register("moveBuiltJars", Copy) {
        if (project.name == "common")
            return
        from file("build/libs/${archivesBaseName}-${version}.jar")
        into rootProject.file("jars")
    }

    tasks.register('publishCurseForge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        if (project.name == "common")
            return
        // This token is used to authenticate with CurseForge. It should be handled
        // with the same level of care and security as your actual password. You
        // should never share your token with an untrusted source or publish it
        // publicly to GitHub or embed it within a project. The best practice is to
        // store this token in an environment variable or a build secret.
        apiToken = findProperty('curseforge_token')

        // A project ID is required to tell CurseForge which project the uploaded
        // file belongs to. This is public on your project page and is not private
        // information.
        var projectId = findProperty('curseforge_project')

        // Tells CurseForgeGradle to publish the output of the jar task. This will
        // return a UploadArtifact object that can be used to further configure the
        // file.
        def mainFile = upload(projectId, rootProject.file("jars/${archivesBaseName}-${version}.jar"))
        var capitalized_loader = project.name.substring(0, 1).toUpperCase() + project.name.substring(1)
        mainFile.changelog = getChangelogText(capitalized_loader)//rootProject.file("changelog.md")//'Check the discord #changelogs for details.'
        mainFile.changelogType = "html"
        mainFile.displayName = "Steam 'n Rails ${mod_version} ${capitalized_loader} ${minecraft_version}"
        mainFile.addRequirement("create") // create
        mainFile.addModLoader(capitalized_loader)
        mainFile.addJavaVersion("Java 17")
        mainFile.releaseType = "release"
//        System.out.println("Display name: ${mainFile.displayName}")
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    group = rootProject.maven_group

    // Formats the mod version to include the loader, Minecraft version, and build number (if present)
    // example: 1.0.0+fabric-1.18.2-100
    String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
    version = "${mod_version}+${project.name}-mc${minecraft_version}" + (buildNumber != null ? "-build.${buildNumber}" : "")

    repositories {
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    java {
        withSourcesJar()
    }
}

task resolveAllDependencies {
    description "Resolves all transitive dependencies (e.g. to build offline later)."

    doLast {
        configurations.all {
            if (it.canBeResolved) {
                it.resolve()
            }
        }
    }
}

// 'borrowed' from Create
String getChangelogText(String loader) {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "Steam 'n Rails ${version}"
                temp = "<span style=\"font-size: 18px; color: #333399;\">Steam 'n Rails v${mod_version}</span>&nbsp;&nbsp;<em>for Minecraft $loader ${minecraft_version}</em><br/>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp<br/>"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/Layers-of-Railways/Railway/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += temp
            lineCount++
        } else {
            str += "<p>Please submit any Issues you come across on the&nbsp;<a href=\"https://github.com/Layers-of-Railways/Railway/issues\" rel=\"nofollow\">Issue Tracker</a>.</p>"
            done = true
        }
    }
    return str
}
new File("changelog.html").write getChangelogText("Fabric")
